name: Run linters to check project

on: push

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.1.12"
  POETRY_HOME: "~/.poetry"
  POETRY_URL: "https://install.python-poetry.org"

jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      # Poetry depends on OS, Python version and Poetry version.
      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: "${{ env.POETRY_HOME }}"
          key: "poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}"
      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/pypoetry"
          key: "poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}"
      # virtualenv cache should depends on OS, Python version and `poetry.lock`.
      - name: Cache Packages
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.venv"
          key: "poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}"
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
      - name: "Add Poetry to PATH"
        run: |
          echo "$POETRY_HOME/bin" >> $GITHUB_PATH
      - name: Install Dependencies
        run: |
          poetry install
          echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=${{ github.workspace }}/.venv" >> $GITHUB_ENV
      - name: Run mypy
        run: |
          env
          mypy
